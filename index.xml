<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN" "http://xml.resource.org/authoring/rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648xml">
  <!ENTITY rfc6234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6234.xml">
  <!ENTITY rfc6150 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6150.xml">
  <!ENTITY rfc6151 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6151.xml">
  <!ENTITY rfc7693 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7693.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<rfc category="std" ipr="trust200902" submissionType="independent"
  docName="draft-sporny-hashlink-00">
<front>

  <title>Cryptographic Hyperlinks</title>

  <author initials="M.S." surname="Sporny" fullname="Manu Sporny">
    <organization>Digital Bazaar</organization>
    <address>
      <postal>
        <street>203 Roanoke Street W.</street>
        <city>Blacksburg</city>
        <region>VA</region>
        <code>24060</code>
        <country>US</country>
      </postal>
      <phone>+1 540 961 4469</phone>
      <email>msporny@digitalbazaar.com</email>
      <uri>http://manu.sporny.org/</uri>
    </address>
  </author>

  <date month="December" year="2018" />
  <area>Security</area>
  <workgroup />
  <keyword>hyperlink</keyword>
  <keyword>cryptography</keyword>
  <keyword>security</keyword>

  <abstract>
    <t>
When using a hyperlink to fetch a resource from the Internet, it is often useful
to know if the resource has changed since the data was published. Cryptographic
hashes, such as SHA-256, are often used to determine if published data has
changed in unexpected ways. Due to the nature of most hyperlinks, the
cryptographic hash is often published separately from the link itself.
This specification describes a data model and serialization formats for
expressing cryptographically protected hyperlinks. The mechanisms described
in the document enables a system to publish a hyperlink in a way that
empowers a consuming application to determine if the resource associated with
the hyperlink has changed in unexpected ways.
    </t>
  </abstract>

  <note title="Feedback">
    <t>
This specification is a work product of the
<eref target="https://w3c-dvcg.github.io/">W3C Digital Verification Community Group</eref>
and the
<eref target="https://w3c-ccg.github.io/">W3C Credentials Community Group</eref>.
Feedback related to this specification should be logged in the
<eref target="https://github.com/w3c-dvcg/multibase/issues">issue tracker</eref>
or be sent to
<eref target="mailto:public-credentials@w3.org">public-credentials@w3.org</eref>.
</t>
  </note>
</front>
<middle>
  <section anchor="intro" title="Introduction">
    <t>
Uniform Resource Locators (URLs) enable software developers to build
distributed systems that are able to publish information using hyperlinks.
When a client fetches a resource at the given hyperlink, the result is
typically a stream of data that the client may further process. Due to the
design of most hyperlinks, the data associated with a hyperlink may change
over time. This design feature is often not an issue for systems that
do not depend on static data.
    </t>
    <t>
Some software systems expect data published at a specific URL to not change.
For example, firmware files, operating system releases, security upgrades,
and other high-risk files are often distributed with associated manifest files.
These manifest files typically utilize a cryptographic hash per URL to
ensure that an attack to modify the files themselves will be detected:
      <figure>
        <artwork>
b1a653e5...de5d3e8f3  https://example.com/operating-system.iso
7b23bf52...557a0902c  https://example.com/firmware-v4.35.bin
        </artwork>
      </figure>
    </t>
    <t>
An unfortunate downside of the manifest file approach is that a separate system
from the URL itself must be utilized to add this level of content integrity
protection. In addition, the cryptographic hash format for the files are often
application specific and are not easily upgradeable once newer and more
advanced cryptographic hash formats are standardized.
    </t>
    <t>
New types of distributed file storage networks have been deployed over the
past several decades. Examples include HTTP file mirrors for the Debian
Operating System, peer-to-peer file networks such as BitTorrent, and
content-addressed networks, such as the Inter Planetary File System (IPFS).
While each one of these systems have their own URL format, it is currently not
possible to express a content-addressed URL that associates the content
address to a file published on each one of these networks.
    </t>
    <t>
This specification provides a simple data model and serialization formats
for cryptographic hyperlinks that:
      <list style="symbols">
         <t>Enable existing URLs to add content integrity protection.</t>
         <t>Provide a URL format for multi-sourced content integrity protected data.</t>
         <t>Enable URL metadata to be discarded without having to re-encode the URL.</t>
         <t>Enable algorithm agility for all data model components</t>
      </list>
    </t>

    <section anchor="encodings" title="Multiple Encodings">
      <t>
A hashlink can be encoded in two different ways, the RECOMMENDED way to
express a hashlink is:
        <figure>
          <artwork>hl:&lt;resource-hash&gt;:&lt;optional-metadata&gt;</artwork>
        </figure>
      </t>
      <t>
To enable existing applications utilizing historical URL schemes to provide
content integrity protection, hashlinks may also be encoded using URL
parameters:
        <figure>
          <artwork>&lt;url&gt;?hl=&lt;resource-hash&gt;</artwork>
        </figure>
      </t>

      <t>
Implementers should take note that the URL parameter-based encoding mechanism
is application specific and SHOULD NOT be used unless the URL resolver for the
application cannot be upgraded to support the RECOMMENDED encoding.
      </t>
    </section>
  </section>

  <section anchor="data-model" title="Hashlink Data Model">
    <t>
The hashlink data model is a simple expression of a cryptographic hash of
the resource, one or more URLs, and a content type.
    </t>
    <section anchor="resource-hash" title="The Resource Hash">
      <t>
The resource hash is the the mechanism that enables content integrity
protection for the associated data stream. The resource hash value MUST be
provided in a hashlink.
      </t>
    </section>
    <section anchor="metadata" title="The Optional Metadata">
      <t>
All metadata associated with the hashlink is optional and is provided to
enable a client to more easily discover data that matches the provided
resource hash.
      </t>
      <section anchor="md-url" title="URLs">
        <t>
A hashlink may be associated with a set of one or more URLs that, when
dereferenced, result in data that matches the resource hash.
        </t>
      </section>
      <section anchor="md-content-type" title="Content Type">
        <t>
A hashlink may be associated with exactly one Content Type that may be used
in protocols that support content types, such as HTTP's Accept header.
        </t>
      </section>
    </section>
  </section>

  <section anchor="serialization" title="Hashlink Serialization">
    <t>
A hashlink may be serialized in one or two ways. The first is the
RECOMMENDED method, called a "Hashlink URL", which is a compact URL
representation of the Hashlink data model. The second is called a
"Hashlink as a Parameterized URL", which MUST NOT be used unless there is no
mechanism available to upgrade the application's URL resolver.
    </t>

    <section anchor="hashlink-url" title="Hashlink URL">
      <section anchor="serializing-rh" title="Serializing the Resource Hash">
        <t>
The value of the resource hash can be generated by utilizing the following
algorithm:
        </t>
        <list style="numbers">
          <t>
Generate the raw hash value by processing the resource data using the
cryptographic hashing algorithm.
          </t>
          <t>
Generate the multihash value by encoding the raw hash using the Multihash
Data Format.
          </t>
          <t>
Generate the multibase hash by encoding the multihash value using the Multibase
Data Format.
          </t>
          <t>
Output the multibase hash as the resource hash.
          </t>
        </list>
        <t>
The example below demonstrates the output of the algorithm above for a
hashlink that expresses the data "Hello World!" processed using the
SHA-2, 256 bit, 32 byte cryptographic algorithm which is then expressed using
the base-58 Bitcoin base-encoding format:
          <figure>
            <artwork>TBD</artwork>
          </figure>
        </t>
      </section>
      <section anchor="serializing-md" title="Serializing the Metadata">
        <t>
To generate the value for the metadata, the metadata values are encoded in
the CBOR data format using the following algorithm:
        </t>
        <list style="numbers">
          <t>
Create the raw output map (CBOR major type 5).
          </t>
          <t>
If at least one URL exists, add a CBOR key of 15 (0x0f) to the raw output map
with a value that is an array (CBOR major type 4).
            <list style="numbers">
              <t>
Encode each URL as a CBOR URI (CBOR type 32) and place it into the array.
              </t>
            </list>
          </t>
          <t>
If the content type exists, add a CBOR key of 14 (0x0e) to the raw output
map with a value that is a UTF-8 byte string (0x6) and the
value of the content type.
          </t>
          <t>
Generate the multibase value by encoding the raw output map using the
Multibase Data Format.
          </t>
        </list>
        <t>
The example below demonstrates the output of the algorithm above for metadata
containing a single URL with a content type of "text/plain" expressed using
the base-58 Bitcoin base-encoding format:
          <figure>
            <artwork>TBD</artwork>
          </figure>
        </t>
      </section>

      <section anchor="ex-simple" title="A Simple Hashlink Example">
        <t>
The example below demonstrates a simple hashlink that provides content
integrity protection for the "http://example.org/hw.txt" file, which has a
content type of "text/plain":
          <figure>
            <artwork>hl:TBD:TBD</artwork>
          </figure>
        </t>
      </section>
    </section>

    <section anchor="hl-url-params" title="Hashlink as a Parameterized URL">
      <t>
An algorithm resulting in the same output as the one below MUST be used when
encoding the hashlink data model as a set of parameters in a URL:
      </t>
        <list style="numbers">
          <t>
Create an empty string and assign it to the output value.
          </t>
          <t>
Append the first URL in the URL metadata array to the output URL.
          </t>
          <t>
Append a URL parameter with a key of "hl" and the value of the resource hash
as generated in <xref target="serializing-rh"></xref>.
          </t>
        </list>
      <section anchor="ex-params" title="Hashlink as a Parameterized URL Example">
        <t>
The example below demonstrates a simple hashlink that provides content
integrity protection for the "http://example.org/hw.txt" file, which has a
content type of "text/plain":
          <figure>
            <artwork>http://example.org/hw.txt?hl=</artwork>
          </figure>
        </t>
      </section>
    </section>
  </section>
</middle>

<back>
  <references title="Normative References">
&rfc2119;
&rfc6234;
&rfc7693;
  </references>

  <references title="Informative References">
&rfc6150;
&rfc6151;
  </references>

  <section anchor="appendix-a" title="Security Considerations">
    <t>
There are a number of security considerations to take into account when
implementing or utilizing this specification.

TBD
    </t>
  </section>
  <section anchor="appendix-c" title="Test Values">

    <t>
TBD - test values
    </t>

    <section anchor="tv-" title="">
      <t>
        <artwork>
        </artwork>
      </t>
    </section>

  </section>
  <section anchor="acknowledgements" title="Acknowledgements">
    <t>
The editors would like to thank the following individuals for feedback on and
implementations of the specification (in alphabetical order):
    </t>
  </section>
</back>
</rfc>